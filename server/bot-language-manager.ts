import { storage } from "./storage";

export interface BotMessage {
  en: string;
  es: string;
  hi: string;
  [key: string]: string;
}

export interface LanguageSupport {
  code: string;
  name: string;
  flag: string;
  rtl: boolean;
}

export const SUPPORTED_LANGUAGES: Record<string, LanguageSupport> = {
  en: { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕', rtl: false },
  es: { code: 'es', name: 'Espa├▒ol', flag: 'ЁЯЗкЁЯЗ╕', rtl: false },
  hi: { code: 'hi', name: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
};

export const BOT_MESSAGES: Record<string, BotMessage> = {
  welcome: {
    en: "Welcome to AutoForwardX! ЁЯЪА\n\nI'm your Telegram forwarding assistant. Type /help to see available commands.",
    es: "┬бBienvenido a AutoForwardX! ЁЯЪА\n\nSoy tu asistente de reenv├нo de Telegram. Escribe /help para ver los comandos disponibles.",
    hi: "AutoForwardX рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯЪА\n\nрдореИрдВ рдЖрдкрдХрд╛ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдб рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП /help рдЯрд╛рдЗрдк рдХрд░реЗрдВред"
  },
  
  help: {
    en: "ЁЯдЦ AutoForwardX Bot Commands:\n\n" +
        "/start - Start using the bot\n" +
        "/help - Show this help message\n" +
        "/language - Change bot language\n" +
        "/login - Connect your account\n" +
        "/status - Check your forwarding status\n" +
        "/pairs - View your forwarding pairs\n" +
        "/pause - Pause all forwarding\n" +
        "/resume - Resume all forwarding\n" +
        "/stats - View forwarding statistics\n" +
        "/plan - View your current plan\n" +
        "/errors - View recent errors\n\n" +
        "Need help? Contact support!",
    es: "ЁЯдЦ Comandos del Bot AutoForwardX:\n\n" +
        "/start - Comenzar a usar el bot\n" +
        "/help - Mostrar este mensaje de ayuda\n" +
        "/language - Cambiar idioma del bot\n" +
        "/login - Conectar tu cuenta\n" +
        "/status - Verificar estado de reenv├нo\n" +
        "/pairs - Ver tus pares de reenv├нo\n" +
        "/pause - Pausar todo el reenv├нo\n" +
        "/resume - Reanudar todo el reenv├нo\n" +
        "/stats - Ver estad├нsticas de reenv├нo\n" +
        "/plan - Ver tu plan actual\n" +
        "/errors - Ver errores recientes\n\n" +
        "┬┐Necesitas ayuda? ┬бContacta soporte!",
    hi: "ЁЯдЦ AutoForwardX рдмреЙрдЯ рдХрдорд╛рдВрдбреНрд╕:\n\n" +
        "/start - рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рд╢реБрд░реВ рдХрд░реЗрдВ\n" +
        "/help - рдпрд╣ рд╕рд╣рд╛рдпрддрд╛ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдВ\n" +
        "/language - рдмреЙрдЯ рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ\n" +
        "/login - рдЕрдкрдирд╛ рдЦрд╛рддрд╛ рдХрдиреЗрдХреНрдЯ рдХрд░реЗрдВ\n" +
        "/status - рдЕрдкрдиреА рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪреЗрдВ\n" +
        "/pairs - рдЕрдкрдиреЗ рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рдЬреЛрдбрд╝реЗ рджреЗрдЦреЗрдВ\n" +
        "/pause - рд╕рднреА рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд░реЛрдХреЗрдВ\n" +
        "/resume - рд╕рднреА рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ\n" +
        "/stats - рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рдЖрдВрдХрдбрд╝реЗ рджреЗрдЦреЗрдВ\n" +
        "/plan - рдЕрдкрдирд╛ рд╡рд░реНрддрдорд╛рди рдкреНрд▓рд╛рди рджреЗрдЦреЗрдВ\n" +
        "/errors - рд╣рд╛рд▓ рдХреА рддреНрд░реБрдЯрд┐рдпрд╛рдВ рджреЗрдЦреЗрдВ\n\n" +
        "рдорджрдж рдЪрд╛рд╣рд┐рдП? рд╕рдкреЛрд░реНрдЯ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ!"
  },

  languageSelection: {
    en: "ЁЯМР Select your preferred language:\n\nChoose a language for bot interactions:",
    es: "ЁЯМР Selecciona tu idioma preferido:\n\nElige un idioma para las interacciones del bot:",
    hi: "ЁЯМР рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:\n\nрдмреЙрдЯ рдЗрдВрдЯрд░реЗрдХреНрд╢рди рдХреЗ рд▓рд┐рдП рдПрдХ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:"
  },

  languageChanged: {
    en: "тЬЕ Language changed to English successfully!",
    es: "тЬЕ ┬бIdioma cambiado a Espa├▒ol exitosamente!",
    hi: "тЬЕ рднрд╛рд╖рд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рд┐рдиреНрджреА рдореЗрдВ рдмрджрд▓ рдЧрдИ!"
  },

  loginPrompt: {
    en: "ЁЯФР Account Login\n\nTo connect your AutoForwardX account, please enter your username:",
    es: "ЁЯФР Inicio de Sesi├│n\n\nPara conectar tu cuenta de AutoForwardX, por favor ingresa tu nombre de usuario:",
    hi: "ЁЯФР рдЦрд╛рддрд╛ рд▓реЙрдЧрд┐рди\n\nрдЕрдкрдирд╛ AutoForwardX рдЦрд╛рддрд╛ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ:"
  },

  loginSuccess: {
    en: "тЬЕ Successfully connected to your AutoForwardX account!\n\nYou can now use bot commands to manage your forwarding.",
    es: "тЬЕ ┬бConectado exitosamente a tu cuenta de AutoForwardX!\n\nAhora puedes usar comandos del bot para gestionar tu reenv├нo.",
    hi: "тЬЕ рдЖрдкрдХреЗ AutoForwardX рдЦрд╛рддреЗ рд╕реЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреБрдбрд╝ рдЧрдпрд╛!\n\nрдЕрдм рдЖрдк рдЕрдкрдиреА рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмреЙрдЯ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
  },

  loginFailed: {
    en: "тЭМ Login failed. Please check your username and try again.",
    es: "тЭМ Error al iniciar sesi├│n. Por favor verifica tu nombre de usuario e intenta de nuevo.",
    hi: "тЭМ рд▓реЙрдЧрд┐рди рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
  },

  notLoggedIn: {
    en: "ЁЯФТ You need to login first. Use /login to connect your account.",
    es: "ЁЯФТ Necesitas iniciar sesi├│n primero. Usa /login para conectar tu cuenta.",
    hi: "ЁЯФТ рдЖрдкрдХреЛ рдкрд╣рд▓реЗ рд▓реЙрдЧрд┐рди рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред рдЕрдкрдирд╛ рдЦрд╛рддрд╛ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /login рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред"
  },

  statusActive: {
    en: "тЬЕ Forwarding Status: ACTIVE\n\nЁЯУК Quick Stats:",
    es: "тЬЕ Estado de Reenv├нo: ACTIVO\n\nЁЯУК Estad├нsticas R├бpidas:",
    hi: "тЬЕ рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд╕реНрдерд┐рддрд┐: рд╕рдХреНрд░рд┐рдп\n\nЁЯУК рддреНрд╡рд░рд┐рдд рдЖрдВрдХрдбрд╝реЗ:"
  },

  statusInactive: {
    en: "тП╕я╕П Forwarding Status: PAUSED\n\nЁЯУК Quick Stats:",
    es: "тП╕я╕П Estado de Reenv├нo: PAUSADO\n\nЁЯУК Estad├нsticas R├бpidas:",
    hi: "тП╕я╕П рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд╕реНрдерд┐рддрд┐: рд░реБрдХрд╛ рд╣реБрдЖ\n\nЁЯУК рддреНрд╡рд░рд┐рдд рдЖрдВрдХрдбрд╝реЗ:"
  },

  pairsHeader: {
    en: "ЁЯУЛ Your Forwarding Pairs:",
    es: "ЁЯУЛ Tus Pares de Reenv├нo:",
    hi: "ЁЯУЛ рдЖрдкрдХреЗ рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рдЬреЛрдбрд╝реЗ:"
  },

  noPairs: {
    en: "ЁЯУн No forwarding pairs found.\n\nCreate pairs through the web dashboard to start forwarding.",
    es: "ЁЯУн No se encontraron pares de reenv├нo.\n\nCrea pares a trav├йs del panel web para comenzar el reenv├нo.",
    hi: "ЁЯУн рдХреЛрдИ рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рдЬреЛрдбрд╝реЗ рдирд╣реАрдВ рдорд┐рд▓реЗред\n\nрдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╡реЗрдм рдбреИрд╢рдмреЛрд░реНрдб рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЬреЛрдбрд╝реЗ рдмрдирд╛рдПрдВред"
  },

  pauseSuccess: {
    en: "тП╕я╕П All forwarding has been paused successfully.",
    es: "тП╕я╕П Todo el reenv├нo ha sido pausado exitosamente.",
    hi: "тП╕я╕П рд╕рднреА рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░реЛрдХ рджреА рдЧрдИ рд╣реИред"
  },

  resumeSuccess: {
    en: "тЦ╢я╕П All forwarding has been resumed successfully.",
    es: "тЦ╢я╕П Todo el reenv├нo ha sido reanudado exitosamente.",
    hi: "тЦ╢я╕П рд╕рднреА рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рдХреА рдЧрдИ рд╣реИред"
  },

  statsHeader: {
    en: "ЁЯУИ Forwarding Statistics:",
    es: "ЁЯУИ Estad├нsticas de Reenv├нo:",
    hi: "ЁЯУИ рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рдЖрдВрдХрдбрд╝реЗ:"
  },

  planHeader: {
    en: "ЁЯТО Your Current Plan:",
    es: "ЁЯТО Tu Plan Actual:",
    hi: "ЁЯТО рдЖрдкрдХрд╛ рд╡рд░реНрддрдорд╛рди рдкреНрд▓рд╛рди:"
  },

  errorsHeader: {
    en: "тЪая╕П Recent Errors:",
    es: "тЪая╕П Errores Recientes:",
    hi: "тЪая╕П рд╣рд╛рд▓ рдХреА рддреНрд░реБрдЯрд┐рдпрд╛рдВ:"
  },

  noErrors: {
    en: "тЬЕ No recent errors found. Your forwarding is running smoothly!",
    es: "тЬЕ No se encontraron errores recientes. ┬бTu reenv├нo est├б funcionando sin problemas!",
    hi: "тЬЕ рдХреЛрдИ рд╣рд╛рд▓ рдХреА рддреНрд░реБрдЯрд┐рдпрд╛рдВ рдирд╣реАрдВ рдорд┐рд▓реАрдВред рдЖрдкрдХреА рдлреЙрд░рд╡рд░реНрдбрд┐рдВрдЧ рд╕реБрдЪрд╛рд░реВ рд░реВрдк рд╕реЗ рдЪрд▓ рд░рд╣реА рд╣реИ!"
  },

  unknownCommand: {
    en: "тЭУ Unknown command. Type /help to see available commands.",
    es: "тЭУ Comando desconocido. Escribe /help para ver los comandos disponibles.",
    hi: "тЭУ рдЕрдЬреНрдЮрд╛рдд рдХрдорд╛рдВрдбред рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдб рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП /help рдЯрд╛рдЗрдк рдХрд░реЗрдВред"
  },

  error: {
    en: "тЭМ An error occurred. Please try again later.",
    es: "тЭМ Ocurri├│ un error. Por favor intenta de nuevo m├бs tarde.",
    hi: "тЭМ рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
  }
};

export class BotLanguageManager {
  private static instance: BotLanguageManager;
  private userLanguages: Map<number, string> = new Map();

  static getInstance(): BotLanguageManager {
    if (!BotLanguageManager.instance) {
      BotLanguageManager.instance = new BotLanguageManager();
    }
    return BotLanguageManager.instance;
  }

  async getUserLanguage(telegramUserId: number): Promise<string> {
    if (this.userLanguages.has(telegramUserId)) {
      return this.userLanguages.get(telegramUserId)!;
    }

    try {
      // Try to get user language from database
      const user = await storage.getUserByTelegramId(telegramUserId);
      if (user && user.preferredLanguage) {
        this.userLanguages.set(telegramUserId, user.preferredLanguage);
        return user.preferredLanguage;
      }
    } catch (error) {
      console.error('Error fetching user language:', error);
    }

    // Default to English
    this.userLanguages.set(telegramUserId, 'en');
    return 'en';
  }

  async setUserLanguage(telegramUserId: number, languageCode: string): Promise<boolean> {
    try {
      if (!SUPPORTED_LANGUAGES[languageCode]) {
        return false;
      }

      // Update in memory cache
      this.userLanguages.set(telegramUserId, languageCode);

      // Update in database
      const user = await storage.getUserByTelegramId(telegramUserId);
      if (user) {
        await storage.updateUser(user.id, { preferredLanguage: languageCode });
      }

      return true;
    } catch (error) {
      console.error('Error setting user language:', error);
      return false;
    }
  }

  async getMessage(messageKey: string, telegramUserId: number, variables?: Record<string, string>): Promise<string> {
    const userLanguage = await this.getUserLanguage(telegramUserId);
    const message = BOT_MESSAGES[messageKey];

    if (!message) {
      return `Message key '${messageKey}' not found`;
    }

    let text = message[userLanguage] || message.en || 'Message not available';

    // Replace variables if provided
    if (variables) {
      Object.entries(variables).forEach(([key, value]) => {
        text = text.replace(new RegExp(`{{${key}}}`, 'g'), value);
      });
    }

    return text;
  }

  getLanguageKeyboard(): any {
    const keyboard = Object.values(SUPPORTED_LANGUAGES).map(lang => [
      {
        text: `${lang.flag} ${lang.name}`,
        callback_data: `lang_${lang.code}`
      }
    ]);

    return {
      inline_keyboard: keyboard
    };
  }

  getSupportedLanguages(): LanguageSupport[] {
    return Object.values(SUPPORTED_LANGUAGES);
  }

  isValidLanguage(languageCode: string): boolean {
    return !!SUPPORTED_LANGUAGES[languageCode];
  }

  formatStats(stats: any, language: string): string {
    const messages = {
      en: {
        pairs: 'Active Pairs',
        messages: 'Messages Forwarded',
        success: 'Success Rate',
        today: 'Today',
        total: 'Total'
      },
      es: {
        pairs: 'Pares Activos',
        messages: 'Mensajes Reenviados',
        success: 'Tasa de ├Йxito',
        today: 'Hoy',
        total: 'Total'
      },
      hi: {
        pairs: 'рд╕рдХреНрд░рд┐рдп рдЬреЛрдбрд╝реЗ',
        messages: 'рд╕рдВрджреЗрд╢ рднреЗрдЬреЗ рдЧрдП',
        success: 'рд╕рдлрд▓рддрд╛ рджрд░',
        today: 'рдЖрдЬ',
        total: 'рдХреБрд▓'
      }
    };

    const labels = messages[language as keyof typeof messages] || messages.en;

    return `
${labels.pairs}: ${stats.activePairs}
${labels.messages} (${labels.today}): ${stats.messagesToday}
${labels.messages} (${labels.total}): ${stats.messagesTotal}
${labels.success}: ${stats.successRate}%
    `.trim();
  }

  formatPair(pair: any, language: string): string {
    const statusLabels = {
      en: { active: 'тЬЕ Active', paused: 'тП╕я╕П Paused', stopped: 'тП╣я╕П Stopped', error: 'тЭМ Error' },
      es: { active: 'тЬЕ Activo', paused: 'тП╕я╕П Pausado', stopped: 'тП╣я╕П Detenido', error: 'тЭМ Error' },
      hi: { active: 'тЬЕ рд╕рдХреНрд░рд┐рдп', paused: 'тП╕я╕П рд░реБрдХрд╛', stopped: 'тП╣я╕П рдмрдВрдж', error: 'тЭМ рддреНрд░реБрдЯрд┐' }
    };

    const labels = statusLabels[language as keyof typeof statusLabels] || statusLabels.en;
    const status = labels[pair.status as keyof typeof labels] || pair.status;

    return `${pair.sourceChannelTitle} тЖТ ${pair.destinationChannelTitle}\n${status}`;
  }

  formatError(error: any, language: string): string {
    const timeLabels = {
      en: 'at',
      es: 'a las',
      hi: 'рдкрд░'
    };

    const timeLabel = timeLabels[language as keyof typeof timeLabels] || timeLabels.en;
    const time = new Date(error.timestamp).toLocaleString();

    return `тАв ${error.message}\n  ${timeLabel} ${time}`;
  }
}

export const botLanguageManager = BotLanguageManager.getInstance();